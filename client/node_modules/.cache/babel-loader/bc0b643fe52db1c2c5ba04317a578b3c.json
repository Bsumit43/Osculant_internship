{"ast":null,"code":"var _jsxFileName = \"/Users/sumitbhagat/Documents/API/client/src/components/auth/RegisterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../Actions/authActions'; // import { clearErrors } from '../../Actions/errorActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      email: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.toggle();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \" Register \"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }, \"Register\"))))));\n  }\n\n} // const RegisterModal = ({\n//   isAuthenticated,\n//   error,\n//   register,\n//   clearErrors\n// }: IRegisterModal) => {\n//   const [modal, setModal] = useState(false);\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [msg, setMsg] = useState(null);\n//   const handleToggle = useCallback(() => {\n//     // Clear errors\n//     clearErrors();\n//     setModal(!modal);\n//   }, [clearErrors, modal]);\n//   const handleChangeName = (e: ITarget) => setName(e.target.value);\n//   const handleChangeEmail = (e: ITarget) => setEmail(e.target.value);\n//   const handleChangePassword = (e: ITarget) => setPassword(e.target.value);\n//   const handleOnSubmit = (e: any) => {\n//     e.preventDefault();\n//     // Create user object\n//     const user = {\n//       name,\n//       email,\n//       password\n//     };\n//     // Attempt to login\n//     register(user);\n//   };\n//   useEffect(() => {\n//     // Check for register error\n//     if (error.id === 'REGISTER_FAIL') {\n//       setMsg(error.msg.msg);\n//     } else {\n//       setMsg(null);\n//     }\n//     // If authenticated, close modal\n//     if (modal) {\n//       if (isAuthenticated) {\n//         handleToggle();\n//       }\n//     }\n//   }, [error, handleToggle, isAuthenticated, modal]);\n//   return (\n//     <div>\n//       <NavLink onClick={handleToggle} href=\"#\">\n//         Register\n//       </NavLink>\n//       <Modal isOpen={modal} toggle={handleToggle}>\n//         <ModalHeader toggle={handleToggle}>Register</ModalHeader>\n//         <ModalBody>\n//           {msg ? <Alert color=\"danger\">{msg}</Alert> : null}\n//           <Form onSubmit={handleOnSubmit}>\n//             <FormGroup>\n//               <Label for=\"name\">Name</Label>\n//               <Input\n//                 type=\"text\"\n//                 name=\"name\"\n//                 id=\"name\"\n//                 placeholder=\"Name\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeName}\n//               />\n//               <Label for=\"email\">Email</Label>\n//               <Input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 id=\"email\"\n//                 placeholder=\"Email\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeEmail}\n//               />\n//               <Label for=\"password\">Password</Label>\n//               <Input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 id=\"password\"\n//                 placeholder=\"Password\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangePassword}\n//               />\n//               <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n//                 Register\n//               </Button>\n//             </FormGroup>\n//           </Form>\n//         </ModalBody>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps // , { register, clearErrors }\n)(RegisterModal);","map":{"version":3,"sources":["/Users/sumitbhagat/Documents/API/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","RegisterModal","state","modal","name","email","password","msg","toggle","setState","onChange","e","target","value","onSubmit","preventDefault","render","marginTop","propTypes","isAuthenticated","bool","error","object","isRequired","mapStateToProps","auth"],"mappings":"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AAZ,OAFP;AAGA,MAAA,KAAK,MAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9BJ,CADJ,CADJ,CALJ,CALJ,CADJ;AAyDH;;AA3FiC,C,CAkGtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAxMMhB,a,CAUKiB,S,GAAY;AACfC,EAAAA,eAAe,EAAEpB,SAAS,CAACqB,IADZ;AAEfC,EAAAA,KAAK,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC;AAFT,C;;AAgMvB,MAAMC,eAAe,GAAItB,KAAD,KAAY;AAClCiB,EAAAA,eAAe,EAAEjB,KAAK,CAACuB,IAAN,CAAWN,eADM;AAElCE,EAAAA,KAAK,EAAEnB,KAAK,CAACmB;AAFqB,CAAZ,CAAxB;;AAKA,eAAevB,OAAO,CAAC0B,eAAD,CAClB;AADkB,CAAP,CAGbvB,aAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  NavLink,\n  Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../Actions/authActions';\n// import { clearErrors } from '../../Actions/errorActions';\n\n\nclass RegisterModal extends Component {\n    state = {\n        modal: false,\n        name: '',\n        email: '',\n        password: '',\n        msg: null\n    };\n\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired\n        \n    }\n\n    toggle = () => {\n        this.setState({\n            modal : !this.state.modal\n        });\n    }\n    onChange = (e) => {\n        this.setState({ [e.target.name] : e.target.value});\n    }\n    onSubmit = e => {\n        e.preventDefault();\n\n        \n\n        this.toggle();\n    }\n\n\n    render(){\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Register\n                </NavLink>\n\n                <Modal\n                isOpen={this.state.modal}\n                toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}> Register </ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"name\">Name</Label>\n                                <Input\n                                type=\"text\"\n                                name=\"name\"\n                                id=\"name\"\n                                placeholder=\"Name\"\n                                className=\"mb-3\"\n                                onChange={this.onChange}\n                                ></Input>\n\n                                <Label for=\"email\">Email</Label>\n                                <Input\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email\"\n                                className=\"mb-3\"\n                                onChange={this.onChange}\n                                ></Input>\n\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                className=\"mb-3\"\n                                onChange={this.onChange}\n                                ></Input>\n                                <Button\n                                color=\"dark\"\n                                style={{marginTop: '2rem'}}\n                                block\n                                >Register</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n\n\n\n            </div>\n        )\n    }\n\n}\n\n\n\n\n// const RegisterModal = ({\n//   isAuthenticated,\n//   error,\n//   register,\n//   clearErrors\n// }: IRegisterModal) => {\n//   const [modal, setModal] = useState(false);\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [msg, setMsg] = useState(null);\n\n//   const handleToggle = useCallback(() => {\n//     // Clear errors\n//     clearErrors();\n//     setModal(!modal);\n//   }, [clearErrors, modal]);\n\n//   const handleChangeName = (e: ITarget) => setName(e.target.value);\n//   const handleChangeEmail = (e: ITarget) => setEmail(e.target.value);\n//   const handleChangePassword = (e: ITarget) => setPassword(e.target.value);\n\n//   const handleOnSubmit = (e: any) => {\n//     e.preventDefault();\n\n//     // Create user object\n//     const user = {\n//       name,\n//       email,\n//       password\n//     };\n\n//     // Attempt to login\n//     register(user);\n//   };\n\n//   useEffect(() => {\n//     // Check for register error\n//     if (error.id === 'REGISTER_FAIL') {\n//       setMsg(error.msg.msg);\n//     } else {\n//       setMsg(null);\n//     }\n\n//     // If authenticated, close modal\n//     if (modal) {\n//       if (isAuthenticated) {\n//         handleToggle();\n//       }\n//     }\n//   }, [error, handleToggle, isAuthenticated, modal]);\n\n//   return (\n//     <div>\n//       <NavLink onClick={handleToggle} href=\"#\">\n//         Register\n//       </NavLink>\n\n//       <Modal isOpen={modal} toggle={handleToggle}>\n//         <ModalHeader toggle={handleToggle}>Register</ModalHeader>\n//         <ModalBody>\n//           {msg ? <Alert color=\"danger\">{msg}</Alert> : null}\n//           <Form onSubmit={handleOnSubmit}>\n//             <FormGroup>\n//               <Label for=\"name\">Name</Label>\n//               <Input\n//                 type=\"text\"\n//                 name=\"name\"\n//                 id=\"name\"\n//                 placeholder=\"Name\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeName}\n//               />\n\n//               <Label for=\"email\">Email</Label>\n//               <Input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 id=\"email\"\n//                 placeholder=\"Email\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeEmail}\n//               />\n\n//               <Label for=\"password\">Password</Label>\n//               <Input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 id=\"password\"\n//                 placeholder=\"Password\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangePassword}\n//               />\n//               <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n//                 Register\n//               </Button>\n//             </FormGroup>\n//           </Form>\n//         </ModalBody>\n//       </Modal>\n//     </div>\n//   );\n// };\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps\n    // , { register, clearErrors }\n    )(\n  RegisterModal\n);"]},"metadata":{},"sourceType":"module"}