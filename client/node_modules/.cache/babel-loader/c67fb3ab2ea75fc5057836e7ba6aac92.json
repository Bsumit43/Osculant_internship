{"ast":null,"code":"var _jsxFileName = \"/Users/sumitbhagat/Documents/API/client/src/components/auth/LoginModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { clearErrors } from '../../Actions/errorActions';\nimport { login } from '../../Actions/authActions';\n\nclass LoginModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      email: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      //Clear Errors\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error != prevProps.error) {\n      if (error.id === 'LOGIN_FAIL') {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } //If autheticated close modal\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \" Login \"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 43\n      }\n    }, this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 33\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }, \"Login\"))))));\n  }\n\n} // const RegisterModal = ({\n//   isAuthenticated,\n//   error,\n//   register,\n//   clearErrors\n// }: IRegisterModal) => {\n//   const [modal, setModal] = useState(false);\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [msg, setMsg] = useState(null);\n//   const handleToggle = useCallback(() => {\n//     // Clear errors\n//     clearErrors();\n//     setModal(!modal);\n//   }, [clearErrors, modal]);\n//   const handleChangeName = (e: ITarget) => setName(e.target.value);\n//   const handleChangeEmail = (e: ITarget) => setEmail(e.target.value);\n//   const handleChangePassword = (e: ITarget) => setPassword(e.target.value);\n//   const handleOnSubmit = (e: any) => {\n//     e.preventDefault();\n//     // Create user object\n//     const user = {\n//       name,\n//       email,\n//       password\n//     };\n//     // Attempt to login\n//     register(user);\n//   };\n//   useEffect(() => {\n//     // Check for register error\n//     if (error.id === 'REGISTER_FAIL') {\n//       setMsg(error.msg.msg);\n//     } else {\n//       setMsg(null);\n//     }\n//     // If authenticated, close modal\n//     if (modal) {\n//       if (isAuthenticated) {\n//         handleToggle();\n//       }\n//     }\n//   }, [error, handleToggle, isAuthenticated, modal]);\n//   return (\n//     <div>\n//       <NavLink onClick={handleToggle} href=\"#\">\n//         Register\n//       </NavLink>\n//       <Modal isOpen={modal} toggle={handleToggle}>\n//         <ModalHeader toggle={handleToggle}>Register</ModalHeader>\n//         <ModalBody>\n//           {msg ? <Alert color=\"danger\">{msg}</Alert> : null}\n//           <Form onSubmit={handleOnSubmit}>\n//             <FormGroup>\n//               <Label for=\"name\">Name</Label>\n//               <Input\n//                 type=\"text\"\n//                 name=\"name\"\n//                 id=\"name\"\n//                 placeholder=\"Name\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeName}\n//               />\n//               <Label for=\"email\">Email</Label>\n//               <Input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 id=\"email\"\n//                 placeholder=\"Email\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeEmail}\n//               />\n//               <Label for=\"password\">Password</Label>\n//               <Input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 id=\"password\"\n//                 placeholder=\"Password\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangePassword}\n//               />\n//               <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n//                 Register\n//               </Button>\n//             </FormGroup>\n//           </Form>\n//         </ModalBody>\n//       </Modal>\n//     </div>\n//   );\n// };\n\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors\n})(LoginModal);","map":{"version":3,"sources":["/Users/sumitbhagat/Documents/API/client/src/components/auth/LoginModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","clearErrors","login","LoginModal","state","modal","email","password","msg","toggle","props","setState","onChange","e","target","name","value","onSubmit","preventDefault","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  NavLink,\n  Alert\n} from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { clearErrors } from '../../Actions/errorActions';\n\nimport { login } from '../../Actions/authActions';\n\n\nclass LoginModal extends Component {\n    state = {\n        modal: false,\n        email: '',\n        password: '',\n        msg: null\n    };\n\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        login: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n        \n    }\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props;\n        if(error != prevProps.error){\n\n            if(error.id === 'LOGIN_FAIL'){\n                this.setState({msg: error.msg.msg})\n            }else{\n                this.setState({msg:null});\n            }\n        }\n\n        //If autheticated close modal\n        if(this.state.modal){\n            if(isAuthenticated){\n                this.toggle();\n            }\n\n        }\n    }\n\n    toggle = () => {\n\n        //Clear Errors\n        this.props.clearErrors()\n\n        this.setState({\n            modal : !this.state.modal\n        });\n    }\n    onChange = (e) => {\n        this.setState({ [e.target.name] : e.target.value});\n    }\n    onSubmit = e => {\n        e.preventDefault();\n\n        \n    }\n\n\n    render(){\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Login\n                </NavLink>\n\n                <Modal\n                isOpen={this.state.modal}\n                toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}> Login </ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? <Alert color=\"danger\">{this.state.msg}</Alert> : null }\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                \n\n                                <Label for=\"email\">Email</Label>\n                                <Input\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email\"\n                                className=\"mb-3\"\n                                onChange={this.onChange}\n                                ></Input>\n\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"password\"\n                                placeholder=\"Password\"\n                                className=\"mb-3\"\n                                onChange={this.onChange}\n                                ></Input>\n                                <Button\n                                color=\"dark\"\n                                style={{marginTop: '2rem'}}\n                                block\n                                >Login</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n\n\n\n            </div>\n        )\n    }\n\n}\n\n\n\n\n// const RegisterModal = ({\n//   isAuthenticated,\n//   error,\n//   register,\n//   clearErrors\n// }: IRegisterModal) => {\n//   const [modal, setModal] = useState(false);\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [msg, setMsg] = useState(null);\n\n//   const handleToggle = useCallback(() => {\n//     // Clear errors\n//     clearErrors();\n//     setModal(!modal);\n//   }, [clearErrors, modal]);\n\n//   const handleChangeName = (e: ITarget) => setName(e.target.value);\n//   const handleChangeEmail = (e: ITarget) => setEmail(e.target.value);\n//   const handleChangePassword = (e: ITarget) => setPassword(e.target.value);\n\n//   const handleOnSubmit = (e: any) => {\n//     e.preventDefault();\n\n//     // Create user object\n//     const user = {\n//       name,\n//       email,\n//       password\n//     };\n\n//     // Attempt to login\n//     register(user);\n//   };\n\n//   useEffect(() => {\n//     // Check for register error\n//     if (error.id === 'REGISTER_FAIL') {\n//       setMsg(error.msg.msg);\n//     } else {\n//       setMsg(null);\n//     }\n\n//     // If authenticated, close modal\n//     if (modal) {\n//       if (isAuthenticated) {\n//         handleToggle();\n//       }\n//     }\n//   }, [error, handleToggle, isAuthenticated, modal]);\n\n//   return (\n//     <div>\n//       <NavLink onClick={handleToggle} href=\"#\">\n//         Register\n//       </NavLink>\n\n//       <Modal isOpen={modal} toggle={handleToggle}>\n//         <ModalHeader toggle={handleToggle}>Register</ModalHeader>\n//         <ModalBody>\n//           {msg ? <Alert color=\"danger\">{msg}</Alert> : null}\n//           <Form onSubmit={handleOnSubmit}>\n//             <FormGroup>\n//               <Label for=\"name\">Name</Label>\n//               <Input\n//                 type=\"text\"\n//                 name=\"name\"\n//                 id=\"name\"\n//                 placeholder=\"Name\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeName}\n//               />\n\n//               <Label for=\"email\">Email</Label>\n//               <Input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 id=\"email\"\n//                 placeholder=\"Email\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangeEmail}\n//               />\n\n//               <Label for=\"password\">Password</Label>\n//               <Input\n//                 type=\"password\"\n//                 name=\"password\"\n//                 id=\"password\"\n//                 placeholder=\"Password\"\n//                 className=\"mb-3\"\n//                 onChange={handleChangePassword}\n//               />\n//               <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n//                 Register\n//               </Button>\n//             </FormGroup>\n//           </Form>\n//         </ModalBody>\n//       </Modal>\n//     </div>\n//   );\n// };\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps\n    , { login, clearErrors }\n    )(\n  LoginModal\n);"]},"metadata":{},"sourceType":"module"}